{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport React from 'react';\nconst BEAT_LIMIT = 1000 * 60 * 10;\n/**\n * A helper class to map keys to values.\n * It supports both primitive keys and object keys.\n */\nlet ArrayKeyMap = /*#__PURE__*/function () {\n  function ArrayKeyMap() {\n    _classCallCheck(this, ArrayKeyMap);\n    this.map = new Map();\n    // Use WeakMap to avoid memory leak\n    this.objectIDMap = new WeakMap();\n    this.nextID = 0;\n    this.lastAccessBeat = new Map();\n    // We will clean up the cache when reach the limit\n    this.accessBeat = 0;\n  }\n  return _createClass(ArrayKeyMap, [{\n    key: \"set\",\n    value: function set(keys, value) {\n      // New set will trigger clear\n      this.clear();\n      // Set logic\n      const compositeKey = this.getCompositeKey(keys);\n      this.map.set(compositeKey, value);\n      this.lastAccessBeat.set(compositeKey, Date.now());\n    }\n  }, {\n    key: \"get\",\n    value: function get(keys) {\n      const compositeKey = this.getCompositeKey(keys);\n      const cache = this.map.get(compositeKey);\n      this.lastAccessBeat.set(compositeKey, Date.now());\n      this.accessBeat += 1;\n      return cache;\n    }\n  }, {\n    key: \"getCompositeKey\",\n    value: function getCompositeKey(keys) {\n      const ids = keys.map(key => {\n        if (key && typeof key === 'object') {\n          return `obj_${this.getObjectID(key)}`;\n        }\n        return `${typeof key}_${key}`;\n      });\n      return ids.join('|');\n    }\n  }, {\n    key: \"getObjectID\",\n    value: function getObjectID(obj) {\n      if (this.objectIDMap.has(obj)) {\n        return this.objectIDMap.get(obj);\n      }\n      const id = this.nextID;\n      this.objectIDMap.set(obj, id);\n      this.nextID += 1;\n      return id;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.accessBeat > 10000) {\n        const now = Date.now();\n        this.lastAccessBeat.forEach((beat, key) => {\n          if (now - beat > BEAT_LIMIT) {\n            this.map.delete(key);\n            this.lastAccessBeat.delete(key);\n          }\n        });\n        this.accessBeat = 0;\n      }\n    }\n  }]);\n}();\nconst uniqueMap = new ArrayKeyMap();\n/**\n * Like `useMemo`, but this hook result will be shared across all instances.\n */\nfunction useUniqueMemo(memoFn, deps) {\n  return React.useMemo(() => {\n    const cachedValue = uniqueMap.get(deps);\n    if (cachedValue) {\n      return cachedValue;\n    }\n    const newValue = memoFn();\n    uniqueMap.set(deps, newValue);\n    return newValue;\n  }, deps);\n}\nexport default useUniqueMemo;","map":null,"metadata":{},"sourceType":"module"}