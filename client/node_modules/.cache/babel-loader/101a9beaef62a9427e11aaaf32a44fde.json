{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    const newColor = generateColor(hasValue(value) ? value || '' : prevColor.current);\n    if (prevColor.current.cleared === true) {\n      newColor.cleared = 'controlled';\n    }\n    setColorValue(newColor);\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;","map":null,"metadata":{},"sourceType":"module"}